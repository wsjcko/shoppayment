// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shoppayment.proto

package go_micro_service_shop_payment

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShopPayment service

func NewShopPaymentEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShopPayment service

type ShopPaymentService interface {
	AddPayment(ctx context.Context, in *PaymentInfo, opts ...client.CallOption) (*PaymentID, error)
	UpdatePayment(ctx context.Context, in *PaymentInfo, opts ...client.CallOption) (*Response, error)
	DeletePaymentByID(ctx context.Context, in *PaymentID, opts ...client.CallOption) (*Response, error)
	FindPaymentByID(ctx context.Context, in *PaymentID, opts ...client.CallOption) (*PaymentInfo, error)
	FindAllPayment(ctx context.Context, in *All, opts ...client.CallOption) (*PaymentAll, error)
}

type shopPaymentService struct {
	c    client.Client
	name string
}

func NewShopPaymentService(name string, c client.Client) ShopPaymentService {
	return &shopPaymentService{
		c:    c,
		name: name,
	}
}

func (c *shopPaymentService) AddPayment(ctx context.Context, in *PaymentInfo, opts ...client.CallOption) (*PaymentID, error) {
	req := c.c.NewRequest(c.name, "ShopPayment.AddPayment", in)
	out := new(PaymentID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopPaymentService) UpdatePayment(ctx context.Context, in *PaymentInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopPayment.UpdatePayment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopPaymentService) DeletePaymentByID(ctx context.Context, in *PaymentID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopPayment.DeletePaymentByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopPaymentService) FindPaymentByID(ctx context.Context, in *PaymentID, opts ...client.CallOption) (*PaymentInfo, error) {
	req := c.c.NewRequest(c.name, "ShopPayment.FindPaymentByID", in)
	out := new(PaymentInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopPaymentService) FindAllPayment(ctx context.Context, in *All, opts ...client.CallOption) (*PaymentAll, error) {
	req := c.c.NewRequest(c.name, "ShopPayment.FindAllPayment", in)
	out := new(PaymentAll)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopPayment service

type ShopPaymentHandler interface {
	AddPayment(context.Context, *PaymentInfo, *PaymentID) error
	UpdatePayment(context.Context, *PaymentInfo, *Response) error
	DeletePaymentByID(context.Context, *PaymentID, *Response) error
	FindPaymentByID(context.Context, *PaymentID, *PaymentInfo) error
	FindAllPayment(context.Context, *All, *PaymentAll) error
}

func RegisterShopPaymentHandler(s server.Server, hdlr ShopPaymentHandler, opts ...server.HandlerOption) error {
	type shopPayment interface {
		AddPayment(ctx context.Context, in *PaymentInfo, out *PaymentID) error
		UpdatePayment(ctx context.Context, in *PaymentInfo, out *Response) error
		DeletePaymentByID(ctx context.Context, in *PaymentID, out *Response) error
		FindPaymentByID(ctx context.Context, in *PaymentID, out *PaymentInfo) error
		FindAllPayment(ctx context.Context, in *All, out *PaymentAll) error
	}
	type ShopPayment struct {
		shopPayment
	}
	h := &shopPaymentHandler{hdlr}
	return s.Handle(s.NewHandler(&ShopPayment{h}, opts...))
}

type shopPaymentHandler struct {
	ShopPaymentHandler
}

func (h *shopPaymentHandler) AddPayment(ctx context.Context, in *PaymentInfo, out *PaymentID) error {
	return h.ShopPaymentHandler.AddPayment(ctx, in, out)
}

func (h *shopPaymentHandler) UpdatePayment(ctx context.Context, in *PaymentInfo, out *Response) error {
	return h.ShopPaymentHandler.UpdatePayment(ctx, in, out)
}

func (h *shopPaymentHandler) DeletePaymentByID(ctx context.Context, in *PaymentID, out *Response) error {
	return h.ShopPaymentHandler.DeletePaymentByID(ctx, in, out)
}

func (h *shopPaymentHandler) FindPaymentByID(ctx context.Context, in *PaymentID, out *PaymentInfo) error {
	return h.ShopPaymentHandler.FindPaymentByID(ctx, in, out)
}

func (h *shopPaymentHandler) FindAllPayment(ctx context.Context, in *All, out *PaymentAll) error {
	return h.ShopPaymentHandler.FindAllPayment(ctx, in, out)
}
